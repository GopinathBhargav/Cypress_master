name: Slack Notification

on: [push]

jobs:
  slackNotification:
    runs-on: ubuntu-latest
    steps:
    - name: Post to a Slack channel
      id: slack
      uses: slackapi/slack-github-action@v1.23.0
      with:
    # Slack channel id, channel name, or user id to post message.
    # See also: https://api.slack.com/methods/chat.postMessage#channels
    # You can pass in multiple channels to post to by providing a comma-delimited list of channel IDs.
       channel-id: "C051HUGR21Z"
    # For posting a simple plain text message
       slack-message: "GitHub build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
      env:
       SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
       
       



# jobs:
#   slackNotification:
#     runs-on: ubuntu-latest
#     steps:
#     - name: Slack Notification
#       uses: 8398a7/action-slack@v3.3.0
#       with:
#         status: ${{ job.status }}
#         author_name: ${{ github.event.head_commit.author.name }}
#         author_email: ${{ github.event.head_commit.author.email }}
#         commit_message: ${{ github.event.head_commit.message }}
# #         SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
# #         channel_id: "C12345678"
#         text: "New commit pushed to main branch"
#         color: "#36a64f"
#       env:
#        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
#        SLACK_CHANNEL: C052DNGP6EL
#       if: always()


# name: My Workflow

# on: [push]

# jobs:
#   my-job:
#     runs-on: ubuntu-latest
#     steps:
#     - name: Checkout slack/github-action
#       uses: actions/checkout@v2
#       with:
#         repository: slack/github-action
#         ref: v3.2.0
#     - name: Send Slack message
#       uses: slack/github-action@v3.2.0
#       with:
#         args: '{"text": "Hello, world!"}'
#       env:
#         SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
#         SLACK_CHANNEL: C052DNGP6EL



# name: End-to-end tests

# run-name: ${{ github.actor }} is testing out GitHub Actions üöÄ
# on: [push]
# jobs:
#   Explore-GitHub-Actions:
#     runs-on: ubuntu-latest
#     steps:
#       - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
#       - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
#       - run: echo "üîé The name of the branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
#       - name: Check out repository code
#         uses: actions/checkout@v3
#       - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
#       - run: echo "üñ•Ô∏è The workflow is now ready to test the code on the runner."
#       - name: List files in the repository
#         run: |
#           ls ${{ github.workspace }}
#       - name: Cypress run
#         uses: cypress-io/github-action@v5
#       - run: echo "üçè This job's status is ${{ job.status }}."
#       - name: Slack Notification
#         uses: rtCamp/action-slack-notify@v2
#         env:
#          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
#         if: always()
      
      
      
      
      
#         uses: slack/github-action@v3.2.0
#         env:
#           SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
#         with:
#           channel_id: C052DNGP6EL
#           message: |
#             <!here> A new push has been made to the main branch:
#             - Repository: ${{ github.repository }}
#             - Commit: ${{ github.sha }}
      
      
      







# on: push
# jobs:
#   cypress-run:
#     runs-on: ubuntu-latest
#     env:
#       SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3
#       # Install NPM dependencies, cache them correctly
#       # and run all Cypress tests
#       - name: Cypress run
#         uses: cypress-io/github-action@v5
#       - name: Slack Notification
#         uses: act10ns/slack@v1
#         with: 
#             status: ${{ job.status }}
#             channel: '#github-actions'
#         if: always()
